{"componentChunkName":"component---src-pages-index-jsx","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"wookey-devlog"}},"allMarkdownRemark":{"group":[{"fieldValue":"elasticsearch","totalCount":1},{"fieldValue":"inline","totalCount":1},{"fieldValue":"java","totalCount":2},{"fieldValue":"kotlin","totalCount":3},{"fieldValue":"replica","totalCount":1},{"fieldValue":"shard","totalCount":1}],"nodes":[{"excerpt":"shard \nshard는 mysql과 같은 RDB를 기준으로 partition과 같은 의미로, 데이터를 저장할 때 나누어진 조각 단위라고 생각하면 된다. 즉 shard의 데이터는 복사본이 아닌 저장한 데이터 그 자체이다. elasticsearch에서는 충분히 크기가 큰 데이터를 가진 index의 데이터를 특정한 파티션 단위로 나누며, 이를 shard라고 …","fields":{"slug":"/elasticsearch-shard-replica/"},"frontmatter":{"date":"January 29, 2023","update":"Jan 29, 2023","title":"그래서 elasticsearch shard, replica 값은 어떻게 설정할까?","description":" elasticsearch를 운영하기 위해서는 shard와 replica 갯수를 적절히 설정해야한다. 또한 index에 설정된 shard 수는 한번 설정하면 변경이 불가하기 때문에 운영중에 index를 변경하는 번거로움을 덜기 위해서는 적절하게 갯수를 선정하는 것이 중요하다. 그렇다고 한번 설정한 shard는 정답이 아니다. 시스템이 커지고 변경됨에 따라 언제든 변경의 여지를 두고 지켜봐야할 대상이다. 그래서 shard와 replia의 값 설정 기준에 대한 이야기를 한다. ","tags":["elasticsearch","shard","replica"],"series":"elasticsearch"}},{"excerpt":"Data class java의 lombok도 편하지만 kotlin data class는 기본적인 메소드들을 만들기 진짜 세상 편하다. 하지만 상속을 할때에는 꼭 유의해야하는 사항이 있다. 차근차근 알아보자. hash code 먼저 data class를 선언 했을때 컴파일러가 만들어주는 hash code 메소드를 살펴보자. 간단한  객체를 만들었다. 그리고…","fields":{"slug":"/kotlin-data-class/"},"frontmatter":{"date":"January 28, 2023","update":"Jan 28, 2023","title":"그래서 kotlin data class 상속은?","description":" java의 lombok을 사용할 필요 없도록 잘 설계된 kotlin의 data class의 활용성은 한번 사용해본 개발자라면 공감할 것이다. data class를 상속의 관점에서 알아본다. ","tags":["kotlin"],"series":"kotlin"}},{"excerpt":"inline kotlin 함수에 붙는  키워드는 말 그대로 호출되는 특정 코드 line 사이에 특정 inline 키워드가 붙은 함수의 코드를 넣을(in) 수 있도록 지원하는 키워드이다.\n 키워드는 객체(클래스)와 함수 레벨에서 사용할 수 있다. 예시는 객체 레벨이 아닌 함수 레벨에서 설명한다. inline 함수 간단하게 아래 코드로 살펴보자. 아주 inl…","fields":{"slug":"/kotlin-inline/"},"frontmatter":{"date":"January 23, 2023","update":"Jan 23, 2023","title":"그래서 kotlin inline은 무엇인가?","description":"inline 키워드는 kotlin에서 만들어진 함수 아래 단위에서 사용할 수 있는 키워드 문법이다. 장단점을 비교하고 목적성에 대해 정리한다. ","tags":["kotlin","java","inline"],"series":"kotlin"}},{"excerpt":"Kotlin의 매력 포인트 Null Safe 필요성에 대해서는 두말하면 잔소리다. null에 대한 지원만으로도 너무 행복하다.  java는 null에 취약하며, 언제 어느순간에 NullPointerException이 발생할지 예측할 수 없다. 그래서 늘 null과의 싸움을 하게된다. 떄로는 비즈니스 로직보다 null 체크 로직이 더 많을때도 있다. 물론 …","fields":{"slug":"/kotlin-vs-java/"},"frontmatter":{"date":"January 16, 2023","update":"Jan 16, 2023","title":"그래서 kotlin을 선택한 이유는?","description":"kotlin으로 프로젝트를 진행한지 어느덧 1년 정도가 되었다. 하지만 한번도 java와 비교하여 kotlin의 장점을 깊이 생각해본 적은 없는 것 같다. java와 비교하여 현재 back-end main language로 kotlin을 선택한 이유를 얘기 해본다. 참고로 언어의 기본적인 문법은 다루지 않는다. ","tags":["kotlin","java"],"series":"kotlin"}}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}