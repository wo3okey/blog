{"componentChunkName":"component---src-templates-post-jsx","path":"/kotlin-data-class/","result":{"data":{"site":{"siteMetadata":{"title":"wookey-devlog"}},"markdownRemark":{"id":"362098e9-28f1-5a68-8bb1-5ed635136424","excerpt":"Data class java의 lombok도 편하지만 kotlin data class는 기본적인 메소드들을 만들기 진짜 세상 편하다. 하지만 상속을 할때에는 꼭 유의해야하는 사항이 있다. 차근차근 알아보자. hash code 먼저 data class를 선언 했을때 컴파일러가 만들어주는 hash code 메소드를 살펴보자. 간단한  객체를 만들었다. 그리고…","html":"<h2>Data class</h2>\n<p>java의 lombok도 편하지만 kotlin data class는 기본적인 메소드들을 만들기 진짜 세상 편하다. 하지만 상속을 할때에는 꼭 유의해야하는 사항이 있다. 차근차근 알아보자.</p>\n<h3>hash code</h3>\n<p>먼저 data class를 선언 했을때 컴파일러가 만들어주는 hash code 메소드를 살펴보자. 간단한 <code class=\"language-text\">Person</code> 객체를 만들었다. 그리고 java 코드로 decompile하여 <code class=\"language-text\">hashCode()</code>만 가져왔다.</p>\n<p><code class=\"language-text\">kotlin</code></p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">DataClassPerson</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> phone<span class=\"token operator\">:</span> String\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">java</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> var10000 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> var1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>var10000 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> var10000<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">31</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">31</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> var10001 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>phone<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> var1 <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>var10001 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> var10001<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">hashCode()</code>를 살펴보면 단순히 정의된 변수의 값으로만 hash값을 만들고 있다. 즉 선언된 객체의 변수값들이 같으면 같은 hashcode를 갖는다는 것이다. 바로 한번 확인해보자.</p>\n<p><code class=\"language-text\">kotlin</code></p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> a <span class=\"token operator\">=</span> <span class=\"token function\">DataClassPerson</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"010-1234-5678\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> a1 <span class=\"token operator\">=</span> <span class=\"token function\">DataClassPerson</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"010-1234-5678\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> b <span class=\"token operator\">=</span> <span class=\"token function\">DataClassPerson</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"B\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"010-1234-5678\"</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> a1<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">true\nfalse</code></pre></div>\n<p>예상대로 위 경우 a, a1에 대해 객체의 값이 모두 같으므로 hash code 비교결과가 <code class=\"language-text\">true</code>로 나온다. 또한 a, b에 대해 name값이 다르므로 hash code 비교 결과가 <code class=\"language-text\">false</code>이다. 단순히 변수값만 비교한 값이므로 당연한 결과이다. 그렇다면 data class가 아닌 일반 class는 어떨까?</p>\n<p><code class=\"language-text\">kotlin</code></p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">NormalClassPerson</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> phone<span class=\"token operator\">:</span> String\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> a <span class=\"token operator\">=</span> <span class=\"token function\">NormalClassPerson</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"010-1234-5678\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> a1 <span class=\"token operator\">=</span> <span class=\"token function\">NormalClassPerson</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"010-1234-5678\"</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> a1<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">false</code></pre></div>\n<p>a, a1은 hashcode가 같지 않다는 <code class=\"language-text\">false</code> 결과를 바로 확인 할 수 있다.</p>\n<h2>Data class 상속</h2>\n<p>data class의 부모객체(SuperClass)를 하나 설정해보자. </p>\n<p><code class=\"language-text\">kotlin</code></p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">SuperClass</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> superData<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"\"</span></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">DataClassPerson</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> phone<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">SuperClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>일단 위 코드는 컴파일 되지 않는다. data class끼리 상속하거나 받을순 없다. 이유는 간단하다. </p>\n<ul>\n<li>decompile java 코드를 보면 data class는 기본적으로 <code class=\"language-text\">final</code> 클래스로 정의 되어있기에 상속을 막아뒀다.</li>\n<li>만약 억지로 상속한다 해도 data class에서 만들어주는 기본 메소드들을 부모와 자식것 중 어떤걸로 선택해야할지 정의할 수 없을 것이다. 그렇다고 강제로 어느것으로 정의하기에도 좀...</li>\n</ul>\n<p>그래서 애초에 막아뒀다고 생각한다. 그렇다면 부모 객체 및 변수에 상속 가능한 <code class=\"language-text\">open</code> 키워드를 붙이고, <code class=\"language-text\">hashCode()</code> 까지 재정의하여 data class에 상속을 해보자.</p>\n<p><code class=\"language-text\">kotlin</code></p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">open</span> <span class=\"token keyword\">class</span> <span class=\"token function\">SuperClass</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">open</span> <span class=\"token keyword\">var</span> superData<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"\"</span></span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">DataClassPerson</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> phone<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">SuperClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> a <span class=\"token operator\">=</span> <span class=\"token function\">DataClassPerson</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"010-1234-5678\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> a1 <span class=\"token operator\">=</span> <span class=\"token function\">DataClassPerson</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"010-1234-5678\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span> <span class=\"token punctuation\">{</span> superData <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"super\"</span></span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> a1<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">true</code></pre></div>\n<p>a1에 상속받은 클래스의 <code class=\"language-text\">superData</code> 값을 변경했지만 a, a1의 hashCode는 같다. 이유는 간단하다. kotlin에서는 상속을 받을 때 이미 자식 객체에서 기본 메소드가 정의 되어있다면 이는 재정의 하지 않기 때문이다. 그래서 a, a1은 <code class=\"language-text\">DataClassPerson</code>에 정의된 변수만 가지고 hashcode 값을 정의한다. 그렇다면 상속받은 두 객체 a, a1의 hashcode는 어떻게 구분할 수 있는가? 답은 간단하다. 상속은 상속답게 <code class=\"language-text\">override</code>로 부모 변수를 받아서 재정의 하면 된다.</p>\n<p><code class=\"language-text\">kotlin</code></p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">DataClassPerson</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> phone<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">var</span> superData<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"\"</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">SuperClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> a <span class=\"token operator\">=</span> <span class=\"token function\">DataClassPerson</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"010-1234-5678\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> a1 <span class=\"token operator\">=</span> <span class=\"token function\">DataClassPerson</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"A\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"010-1234-5678\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span> <span class=\"token punctuation\">{</span> superData <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"super\"</span></span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> a1<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">false</code></pre></div>\n<h2>결론</h2>\n<p>java, kotlin 할 것 없이 상속은 간단하고 자주 사용되는 기본적인 문법이지만, 항상 주의를 기울여야한다. 그래서 kotlin 상속시 다음 유의 사항들은 살펴보면 좋을것 같다.</p>\n<blockquote>\n<p>상속한 객체의 변수는 가능한 override 해서 사용할것.<br>\n반드시 부모객체의 정보를 받아야는게 아니라면, 상속이 아닌 interface를 활용하여 재정의 할것.</p>\n</blockquote>","frontmatter":{"title":"kotlin data class 상속","date":"January 28, 2023","update":"January 28, 2023","tags":["kotlin"],"series":"kotlin"},"fields":{"slug":"/kotlin-data-class/","readingTime":{"minutes":5.35}}},"seriesList":{"edges":[{"node":{"id":"d9f6a9e3-ba18-5d7c-8814-2a0e176dc9cb","fields":{"slug":"/kotlin-vs-java/"},"frontmatter":{"title":"java로 되돌아갈 수 없는 kotlin의 매력"}}},{"node":{"id":"0c2d2493-3bc3-5268-b949-647eaa044536","fields":{"slug":"/kotlin-inline/"},"frontmatter":{"title":"kotlin inline 알아보기"}}},{"node":{"id":"362098e9-28f1-5a68-8bb1-5ed635136424","fields":{"slug":"/kotlin-data-class/"},"frontmatter":{"title":"kotlin data class 상속"}}}]},"previous":{"fields":{"slug":"/kotlin-inline/"},"frontmatter":{"title":"kotlin inline 알아보기"}},"next":{"fields":{"slug":"/elasticsearch-shard-replica/"},"frontmatter":{"title":"elasticsearch shard, replica 값은 어떻게 설정할까?"}}},"pageContext":{"id":"362098e9-28f1-5a68-8bb1-5ed635136424","series":"kotlin","previousPostId":"0c2d2493-3bc3-5268-b949-647eaa044536","nextPostId":"9a0adec2-a899-528b-b536-09f6d5915069"}},"staticQueryHashes":[],"slicesMap":{}}